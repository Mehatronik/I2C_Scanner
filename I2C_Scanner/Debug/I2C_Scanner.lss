
I2C_Scanner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000096e  00000a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000096e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800184  00800184  00000a86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9f  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000945  00000000  00000000  0000187b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038f  00000000  00000000  00002f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000331c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 38       	cpi	r26, 0x8F	; 143
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 00 	call	0x104	; 0x104 <main>
  9e:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  b0:	08 95       	ret

000000b2 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	ef e3       	ldi	r30, 0x3F	; 63
  ba:	fc e9       	ldi	r31, 0x9C	; 156
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <i2c_start+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <i2c_start+0x10>
  c2:	00 00       	nop
	// wait until transmission completed
	//while(!(TWCR & (1<<TWINT)));
	_delay_ms(10);			//radi normalno i sa 100 us

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  ca:	98 30       	cpi	r25, 0x08	; 8
  cc:	11 f0       	breq	.+4      	; 0xd2 <i2c_start+0x20>
  ce:	90 31       	cpi	r25, 0x10	; 16
  d0:	a9 f4       	brne	.+42     	; 0xfc <i2c_start+0x4a>

	// send device address
	TWDR = address;
  d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9c e9       	ldi	r25, 0x9C	; 156
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <i2c_start+0x2e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <i2c_start+0x34>
  e6:	00 00       	nop
	// wail until transmission completed and ACK/NACK has been received
	//while(!(TWCR & (1<<TWINT)));
	_delay_ms(10);			//radi normalno i sa 100 us

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ec:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
  ee:	98 31       	cpi	r25, 0x18	; 24
  f0:	39 f0       	breq	.+14     	; 0x100 <i2c_start+0x4e>
	//while(!(TWCR & (1<<TWINT)));
	_delay_ms(10);			//radi normalno i sa 100 us

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 34       	cpi	r25, 0x40	; 64
  f6:	29 f4       	brne	.+10     	; 0x102 <i2c_start+0x50>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	08 95       	ret
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 100:	80 e0       	ldi	r24, 0x00	; 0

}
 102:	08 95       	ret

00000104 <main>:
#include "comm.h"
#include "uart.h"
#include "i2cmaster.h"

int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	c4 56       	subi	r28, 0x64	; 100
 10e:	d1 09       	sbc	r29, r1
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
   char buffer[100];
   int i;
   int nDevices = 0;
   
   uart_init(9600);
 11a:	60 e8       	ldi	r22, 0x80	; 128
 11c:	75 e2       	ldi	r23, 0x25	; 37
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 2e 01 	call	0x25c	; 0x25c <uart_init>
   i2c_init();
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>

   
   sei();
 12a:	78 94       	sei
				//device accessible
				nDevices++;
				
				//i2c_write(0x00);	//dummy write, zato sto je i2cStart + i2cStop invalid u samom protokolu (valjda)
				
				sprintf(buffer, "Device found at address: 0x%02x ! \n", i);
 12c:	0f 2e       	mov	r0, r31
 12e:	fe e0       	ldi	r31, 0x0E	; 14
 130:	cf 2e       	mov	r12, r31
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	df 2e       	mov	r13, r31
 136:	f0 2d       	mov	r31, r0
 138:	ce 01       	movw	r24, r28
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	5c 01       	movw	r10, r24
 13e:	68 2e       	mov	r6, r24
 140:	7b 2c       	mov	r7, r11
		
		if (nDevices == 0)
			uart_send_str("No devices found ! \n");
		else
		{
			sprintf(buffer, "========= Number of devices found: %d ! ========= \n", nDevices);
 142:	0f 2e       	mov	r0, r31
 144:	f7 e4       	ldi	r31, 0x47	; 71
 146:	8f 2e       	mov	r8, r31
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	9f 2e       	mov	r9, r31
 14c:	f0 2d       	mov	r31, r0
   
   sei();
   
    while (1) 
    {
		uart_send_str("Scanning... \n");
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 b8 01 	call	0x370	; 0x370 <uart_send_str>
		
		nDevices = 0;
 156:	e1 2c       	mov	r14, r1
 158:	f1 2c       	mov	r15, r1
		
		for(i = 1; i<127; i++)
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	10 e0       	ldi	r17, 0x00	; 0
		{
			
			if (	i2c_start( (i<<1)+I2C_WRITE ) == 0		)
 15e:	80 2f       	mov	r24, r16
 160:	88 0f       	add	r24, r24
 162:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
 166:	81 11       	cpse	r24, r1
 168:	15 c0       	rjmp	.+42     	; 0x194 <main+0x90>
			{
				//device accessible
				nDevices++;
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	e9 1a       	sub	r14, r25
 16e:	f9 0a       	sbc	r15, r25
				
				//i2c_write(0x00);	//dummy write, zato sto je i2cStart + i2cStop invalid u samom protokolu (valjda)
				
				sprintf(buffer, "Device found at address: 0x%02x ! \n", i);
 170:	1f 93       	push	r17
 172:	0f 93       	push	r16
 174:	df 92       	push	r13
 176:	cf 92       	push	r12
 178:	bf 92       	push	r11
 17a:	af 92       	push	r10
 17c:	0e 94 cb 01 	call	0x396	; 0x396 <sprintf>
				uart_send_str(buffer);
 180:	86 2d       	mov	r24, r6
 182:	97 2d       	mov	r25, r7
 184:	0e 94 b8 01 	call	0x370	; 0x370 <uart_send_str>
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
    {
		uart_send_str("Scanning... \n");
		
		nDevices = 0;
		
		for(i = 1; i<127; i++)
 194:	0f 5f       	subi	r16, 0xFF	; 255
 196:	1f 4f       	sbci	r17, 0xFF	; 255
 198:	0f 37       	cpi	r16, 0x7F	; 127
 19a:	11 05       	cpc	r17, r1
 19c:	01 f7       	brne	.-64     	; 0x15e <main+0x5a>
			//sprintf(buffer, "Loop %d \n", i);
			//uart_send_str(buffer);
			
		}
		
		if (nDevices == 0)
 19e:	e1 14       	cp	r14, r1
 1a0:	f1 04       	cpc	r15, r1
 1a2:	29 f4       	brne	.+10     	; 0x1ae <main+0xaa>
			uart_send_str("No devices found ! \n");
 1a4:	82 e3       	ldi	r24, 0x32	; 50
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 b8 01 	call	0x370	; 0x370 <uart_send_str>
 1ac:	12 c0       	rjmp	.+36     	; 0x1d2 <main+0xce>
		else
		{
			sprintf(buffer, "========= Number of devices found: %d ! ========= \n", nDevices);
 1ae:	ff 92       	push	r15
 1b0:	ef 92       	push	r14
 1b2:	9f 92       	push	r9
 1b4:	8f 92       	push	r8
 1b6:	bf 92       	push	r11
 1b8:	af 92       	push	r10
 1ba:	0e 94 cb 01 	call	0x396	; 0x396 <sprintf>
			uart_send_str(buffer);
 1be:	86 2d       	mov	r24, r6
 1c0:	97 2d       	mov	r25, r7
 1c2:	0e 94 b8 01 	call	0x370	; 0x370 <uart_send_str>
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
		}
		
			

		uart_send_str("Done. \n\n");
 1d2:	8b e7       	ldi	r24, 0x7B	; 123
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 b8 01 	call	0x370	; 0x370 <uart_send_str>
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	83 e2       	ldi	r24, 0x23	; 35
 1de:	94 ef       	ldi	r25, 0xF4	; 244
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0xdc>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0xe6>
 1ea:	00 00       	nop
 1ec:	b0 cf       	rjmp	.-160    	; 0x14e <main+0x4a>

000001ee <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
	poslato=0;
 1f8:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <poslato>
}
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_18>:

ISR(USART_RX_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	input_char=UDR0;
 216:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 21a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
 21e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	98 f4       	brcc	.+38     	; 0x24c <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
 226:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <__data_end>
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <input_char>
 230:	e9 57       	subi	r30, 0x79	; 121
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	80 83       	st	Z, r24
		buff_size++;
 236:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
		input_buffer[buff_size]='\0';
 240:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <__data_end>
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	e9 57       	subi	r30, 0x79	; 121
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	10 82       	st	Z, r1
	}
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
 25c:	22 e0       	ldi	r18, 0x02	; 2
 25e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
 262:	28 ed       	ldi	r18, 0xD8	; 216
 264:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
 268:	26 e0       	ldi	r18, 0x06	; 6
 26a:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
 26e:	61 15       	cp	r22, r1
 270:	2c e2       	ldi	r18, 0x2C	; 44
 272:	72 07       	cpc	r23, r18
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	82 07       	cpc	r24, r18
 278:	91 05       	cpc	r25, r1
 27a:	09 f4       	brne	.+2      	; 0x27e <uart_init+0x22>
 27c:	51 c0       	rjmp	.+162    	; 0x320 <uart_init+0xc4>
 27e:	c8 f4       	brcc	.+50     	; 0x2b2 <uart_init+0x56>
 280:	60 34       	cpi	r22, 0x40	; 64
 282:	28 e3       	ldi	r18, 0x38	; 56
 284:	72 07       	cpc	r23, r18
 286:	81 05       	cpc	r24, r1
 288:	91 05       	cpc	r25, r1
 28a:	a9 f1       	breq	.+106    	; 0x2f6 <uart_init+0x9a>
 28c:	30 f4       	brcc	.+12     	; 0x29a <uart_init+0x3e>
 28e:	60 38       	cpi	r22, 0x80	; 128
 290:	75 42       	sbci	r23, 0x25	; 37
 292:	81 05       	cpc	r24, r1
 294:	91 05       	cpc	r25, r1
 296:	41 f1       	breq	.+80     	; 0x2e8 <uart_init+0x8c>
 298:	64 c0       	rjmp	.+200    	; 0x362 <uart_init+0x106>
 29a:	61 15       	cp	r22, r1
 29c:	2b e4       	ldi	r18, 0x4B	; 75
 29e:	72 07       	cpc	r23, r18
 2a0:	81 05       	cpc	r24, r1
 2a2:	91 05       	cpc	r25, r1
 2a4:	79 f1       	breq	.+94     	; 0x304 <uart_init+0xa8>
 2a6:	61 15       	cp	r22, r1
 2a8:	76 49       	sbci	r23, 0x96	; 150
 2aa:	81 05       	cpc	r24, r1
 2ac:	91 05       	cpc	r25, r1
 2ae:	89 f1       	breq	.+98     	; 0x312 <uart_init+0xb6>
 2b0:	58 c0       	rjmp	.+176    	; 0x362 <uart_init+0x106>
 2b2:	60 32       	cpi	r22, 0x20	; 32
 2b4:	21 ea       	ldi	r18, 0xA1	; 161
 2b6:	72 07       	cpc	r23, r18
 2b8:	27 e0       	ldi	r18, 0x07	; 7
 2ba:	82 07       	cpc	r24, r18
 2bc:	91 05       	cpc	r25, r1
 2be:	f1 f1       	breq	.+124    	; 0x33c <uart_init+0xe0>
 2c0:	30 f4       	brcc	.+12     	; 0x2ce <uart_init+0x72>
 2c2:	60 39       	cpi	r22, 0x90	; 144
 2c4:	70 4d       	sbci	r23, 0xD0	; 208
 2c6:	83 40       	sbci	r24, 0x03	; 3
 2c8:	91 05       	cpc	r25, r1
 2ca:	89 f1       	breq	.+98     	; 0x32e <uart_init+0xd2>
 2cc:	4a c0       	rjmp	.+148    	; 0x362 <uart_init+0x106>
 2ce:	60 34       	cpi	r22, 0x40	; 64
 2d0:	22 e4       	ldi	r18, 0x42	; 66
 2d2:	72 07       	cpc	r23, r18
 2d4:	2f e0       	ldi	r18, 0x0F	; 15
 2d6:	82 07       	cpc	r24, r18
 2d8:	91 05       	cpc	r25, r1
 2da:	b9 f1       	breq	.+110    	; 0x34a <uart_init+0xee>
 2dc:	60 38       	cpi	r22, 0x80	; 128
 2de:	74 48       	sbci	r23, 0x84	; 132
 2e0:	8e 41       	sbci	r24, 0x1E	; 30
 2e2:	91 05       	cpc	r25, r1
 2e4:	c9 f1       	breq	.+114    	; 0x358 <uart_init+0xfc>
 2e6:	3d c0       	rjmp	.+122    	; 0x362 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
 2e8:	8f ec       	ldi	r24, 0xCF	; 207
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2f4:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
 2f6:	8a e8       	ldi	r24, 0x8A	; 138
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 302:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
 304:	87 e6       	ldi	r24, 0x67	; 103
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 30c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 310:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
 312:	83 e3       	ldi	r24, 0x33	; 51
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 31a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 31e:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
 320:	89 e1       	ldi	r24, 0x19	; 25
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 328:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 32c:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
 32e:	87 e0       	ldi	r24, 0x07	; 7
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 336:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 33a:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 344:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 348:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 352:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 356:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
 358:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 35c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 360:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
 362:	8f ec       	ldi	r24, 0xCF	; 207
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 36a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 36e:	08 95       	ret

00000370 <uart_send_str>:
	}
	
}

void uart_send_str(char *str)
{
 370:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
 372:	90 81       	ld	r25, Z
 374:	99 23       	and	r25, r25
 376:	71 f0       	breq	.+28     	; 0x394 <uart_send_str+0x24>
 378:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
 37a:	a6 ec       	ldi	r26, 0xC6	; 198
 37c:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
 37e:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
 380:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
 382:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
 386:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <poslato>
 38a:	91 11       	cpse	r25, r1
 38c:	fc cf       	rjmp	.-8      	; 0x386 <uart_send_str+0x16>

void uart_send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
 38e:	91 91       	ld	r25, Z+
 390:	91 11       	cpse	r25, r1
 392:	f6 cf       	rjmp	.-20     	; 0x380 <uart_send_str+0x10>
 394:	08 95       	ret

00000396 <sprintf>:
 396:	ae e0       	ldi	r26, 0x0E	; 14
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e1 ed       	ldi	r30, 0xD1	; 209
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	0c 94 8c 04 	jmp	0x918	; 0x918 <__stack+0x19>
 3a2:	0d 89       	ldd	r16, Y+21	; 0x15
 3a4:	1e 89       	ldd	r17, Y+22	; 0x16
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	8c 83       	std	Y+4, r24	; 0x04
 3aa:	1a 83       	std	Y+2, r17	; 0x02
 3ac:	09 83       	std	Y+1, r16	; 0x01
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	9f e7       	ldi	r25, 0x7F	; 127
 3b2:	9e 83       	std	Y+6, r25	; 0x06
 3b4:	8d 83       	std	Y+5, r24	; 0x05
 3b6:	ae 01       	movw	r20, r28
 3b8:	47 5e       	subi	r20, 0xE7	; 231
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255
 3bc:	6f 89       	ldd	r22, Y+23	; 0x17
 3be:	78 8d       	ldd	r23, Y+24	; 0x18
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	0e 94 ed 01 	call	0x3da	; 0x3da <vfprintf>
 3c8:	ef 81       	ldd	r30, Y+7	; 0x07
 3ca:	f8 85       	ldd	r31, Y+8	; 0x08
 3cc:	e0 0f       	add	r30, r16
 3ce:	f1 1f       	adc	r31, r17
 3d0:	10 82       	st	Z, r1
 3d2:	2e 96       	adiw	r28, 0x0e	; 14
 3d4:	e4 e0       	ldi	r30, 0x04	; 4
 3d6:	0c 94 a8 04 	jmp	0x950	; 0x950 <__epilogue_restores__+0x1c>

000003da <vfprintf>:
 3da:	ab e0       	ldi	r26, 0x0B	; 11
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	e3 ef       	ldi	r30, 0xF3	; 243
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__prologue_saves__>
 3e6:	6c 01       	movw	r12, r24
 3e8:	7b 01       	movw	r14, r22
 3ea:	8a 01       	movw	r16, r20
 3ec:	fc 01       	movw	r30, r24
 3ee:	17 82       	std	Z+7, r1	; 0x07
 3f0:	16 82       	std	Z+6, r1	; 0x06
 3f2:	83 81       	ldd	r24, Z+3	; 0x03
 3f4:	81 ff       	sbrs	r24, 1
 3f6:	cc c1       	rjmp	.+920    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	3c 01       	movw	r6, r24
 3fe:	f6 01       	movw	r30, r12
 400:	93 81       	ldd	r25, Z+3	; 0x03
 402:	f7 01       	movw	r30, r14
 404:	93 fd       	sbrc	r25, 3
 406:	85 91       	lpm	r24, Z+
 408:	93 ff       	sbrs	r25, 3
 40a:	81 91       	ld	r24, Z+
 40c:	7f 01       	movw	r14, r30
 40e:	88 23       	and	r24, r24
 410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	ba c1       	rjmp	.+884    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 414:	85 32       	cpi	r24, 0x25	; 37
 416:	39 f4       	brne	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	93 fd       	sbrc	r25, 3
 41a:	85 91       	lpm	r24, Z+
 41c:	93 ff       	sbrs	r25, 3
 41e:	81 91       	ld	r24, Z+
 420:	7f 01       	movw	r14, r30
 422:	85 32       	cpi	r24, 0x25	; 37
 424:	29 f4       	brne	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	b6 01       	movw	r22, r12
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 42e:	e7 cf       	rjmp	.-50     	; 0x3fe <vfprintf+0x24>
 430:	91 2c       	mov	r9, r1
 432:	21 2c       	mov	r2, r1
 434:	31 2c       	mov	r3, r1
 436:	ff e1       	ldi	r31, 0x1F	; 31
 438:	f3 15       	cp	r31, r3
 43a:	d8 f0       	brcs	.+54     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 43c:	8b 32       	cpi	r24, 0x2B	; 43
 43e:	79 f0       	breq	.+30     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 440:	38 f4       	brcc	.+14     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 442:	80 32       	cpi	r24, 0x20	; 32
 444:	79 f0       	breq	.+30     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 446:	83 32       	cpi	r24, 0x23	; 35
 448:	a1 f4       	brne	.+40     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 44a:	23 2d       	mov	r18, r3
 44c:	20 61       	ori	r18, 0x10	; 16
 44e:	1d c0       	rjmp	.+58     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 450:	8d 32       	cpi	r24, 0x2D	; 45
 452:	61 f0       	breq	.+24     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 454:	80 33       	cpi	r24, 0x30	; 48
 456:	69 f4       	brne	.+26     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 458:	23 2d       	mov	r18, r3
 45a:	21 60       	ori	r18, 0x01	; 1
 45c:	16 c0       	rjmp	.+44     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 45e:	83 2d       	mov	r24, r3
 460:	82 60       	ori	r24, 0x02	; 2
 462:	38 2e       	mov	r3, r24
 464:	e3 2d       	mov	r30, r3
 466:	e4 60       	ori	r30, 0x04	; 4
 468:	3e 2e       	mov	r3, r30
 46a:	2a c0       	rjmp	.+84     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 46c:	f3 2d       	mov	r31, r3
 46e:	f8 60       	ori	r31, 0x08	; 8
 470:	1d c0       	rjmp	.+58     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 472:	37 fc       	sbrc	r3, 7
 474:	2d c0       	rjmp	.+90     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 476:	20 ed       	ldi	r18, 0xD0	; 208
 478:	28 0f       	add	r18, r24
 47a:	2a 30       	cpi	r18, 0x0A	; 10
 47c:	40 f0       	brcs	.+16     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 47e:	8e 32       	cpi	r24, 0x2E	; 46
 480:	b9 f4       	brne	.+46     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 482:	36 fc       	sbrc	r3, 6
 484:	81 c1       	rjmp	.+770    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 486:	23 2d       	mov	r18, r3
 488:	20 64       	ori	r18, 0x40	; 64
 48a:	32 2e       	mov	r3, r18
 48c:	19 c0       	rjmp	.+50     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 48e:	36 fe       	sbrs	r3, 6
 490:	06 c0       	rjmp	.+12     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 492:	8a e0       	ldi	r24, 0x0A	; 10
 494:	98 9e       	mul	r9, r24
 496:	20 0d       	add	r18, r0
 498:	11 24       	eor	r1, r1
 49a:	92 2e       	mov	r9, r18
 49c:	11 c0       	rjmp	.+34     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 49e:	ea e0       	ldi	r30, 0x0A	; 10
 4a0:	2e 9e       	mul	r2, r30
 4a2:	20 0d       	add	r18, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	22 2e       	mov	r2, r18
 4a8:	f3 2d       	mov	r31, r3
 4aa:	f0 62       	ori	r31, 0x20	; 32
 4ac:	3f 2e       	mov	r3, r31
 4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4b0:	8c 36       	cpi	r24, 0x6C	; 108
 4b2:	21 f4       	brne	.+8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b4:	83 2d       	mov	r24, r3
 4b6:	80 68       	ori	r24, 0x80	; 128
 4b8:	38 2e       	mov	r3, r24
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4bc:	88 36       	cpi	r24, 0x68	; 104
 4be:	41 f4       	brne	.+16     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4c0:	f7 01       	movw	r30, r14
 4c2:	93 fd       	sbrc	r25, 3
 4c4:	85 91       	lpm	r24, Z+
 4c6:	93 ff       	sbrs	r25, 3
 4c8:	81 91       	ld	r24, Z+
 4ca:	7f 01       	movw	r14, r30
 4cc:	81 11       	cpse	r24, r1
 4ce:	b3 cf       	rjmp	.-154    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 4d0:	98 2f       	mov	r25, r24
 4d2:	9f 7d       	andi	r25, 0xDF	; 223
 4d4:	95 54       	subi	r25, 0x45	; 69
 4d6:	93 30       	cpi	r25, 0x03	; 3
 4d8:	28 f4       	brcc	.+10     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4da:	0c 5f       	subi	r16, 0xFC	; 252
 4dc:	1f 4f       	sbci	r17, 0xFF	; 255
 4de:	9f e3       	ldi	r25, 0x3F	; 63
 4e0:	99 83       	std	Y+1, r25	; 0x01
 4e2:	0d c0       	rjmp	.+26     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4e4:	83 36       	cpi	r24, 0x63	; 99
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4e8:	83 37       	cpi	r24, 0x73	; 115
 4ea:	71 f0       	breq	.+28     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4ec:	83 35       	cpi	r24, 0x53	; 83
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	59 c0       	rjmp	.+178    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 4f2:	21 c0       	rjmp	.+66     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 4f4:	f8 01       	movw	r30, r16
 4f6:	80 81       	ld	r24, Z
 4f8:	89 83       	std	Y+1, r24	; 0x01
 4fa:	0e 5f       	subi	r16, 0xFE	; 254
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	88 24       	eor	r8, r8
 500:	83 94       	inc	r8
 502:	91 2c       	mov	r9, r1
 504:	53 01       	movw	r10, r6
 506:	13 c0       	rjmp	.+38     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 508:	28 01       	movw	r4, r16
 50a:	f2 e0       	ldi	r31, 0x02	; 2
 50c:	4f 0e       	add	r4, r31
 50e:	51 1c       	adc	r5, r1
 510:	f8 01       	movw	r30, r16
 512:	a0 80       	ld	r10, Z
 514:	b1 80       	ldd	r11, Z+1	; 0x01
 516:	36 fe       	sbrs	r3, 6
 518:	03 c0       	rjmp	.+6      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51a:	69 2d       	mov	r22, r9
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 520:	6f ef       	ldi	r22, 0xFF	; 255
 522:	7f ef       	ldi	r23, 0xFF	; 255
 524:	c5 01       	movw	r24, r10
 526:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <strnlen>
 52a:	4c 01       	movw	r8, r24
 52c:	82 01       	movw	r16, r4
 52e:	f3 2d       	mov	r31, r3
 530:	ff 77       	andi	r31, 0x7F	; 127
 532:	3f 2e       	mov	r3, r31
 534:	16 c0       	rjmp	.+44     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 536:	28 01       	movw	r4, r16
 538:	22 e0       	ldi	r18, 0x02	; 2
 53a:	42 0e       	add	r4, r18
 53c:	51 1c       	adc	r5, r1
 53e:	f8 01       	movw	r30, r16
 540:	a0 80       	ld	r10, Z
 542:	b1 80       	ldd	r11, Z+1	; 0x01
 544:	36 fe       	sbrs	r3, 6
 546:	03 c0       	rjmp	.+6      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 548:	69 2d       	mov	r22, r9
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 54e:	6f ef       	ldi	r22, 0xFF	; 255
 550:	7f ef       	ldi	r23, 0xFF	; 255
 552:	c5 01       	movw	r24, r10
 554:	0e 94 ce 03 	call	0x79c	; 0x79c <strnlen_P>
 558:	4c 01       	movw	r8, r24
 55a:	f3 2d       	mov	r31, r3
 55c:	f0 68       	ori	r31, 0x80	; 128
 55e:	3f 2e       	mov	r3, r31
 560:	82 01       	movw	r16, r4
 562:	33 fc       	sbrc	r3, 3
 564:	1b c0       	rjmp	.+54     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 566:	82 2d       	mov	r24, r2
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	88 16       	cp	r8, r24
 56c:	99 06       	cpc	r9, r25
 56e:	b0 f4       	brcc	.+44     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 570:	b6 01       	movw	r22, r12
 572:	80 e2       	ldi	r24, 0x20	; 32
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 57a:	2a 94       	dec	r2
 57c:	f4 cf       	rjmp	.-24     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 57e:	f5 01       	movw	r30, r10
 580:	37 fc       	sbrc	r3, 7
 582:	85 91       	lpm	r24, Z+
 584:	37 fe       	sbrs	r3, 7
 586:	81 91       	ld	r24, Z+
 588:	5f 01       	movw	r10, r30
 58a:	b6 01       	movw	r22, r12
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 592:	21 10       	cpse	r2, r1
 594:	2a 94       	dec	r2
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	82 1a       	sub	r8, r18
 59a:	91 08       	sbc	r9, r1
 59c:	81 14       	cp	r8, r1
 59e:	91 04       	cpc	r9, r1
 5a0:	71 f7       	brne	.-36     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 5a2:	e8 c0       	rjmp	.+464    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
 5a4:	84 36       	cpi	r24, 0x64	; 100
 5a6:	11 f0       	breq	.+4      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a8:	89 36       	cpi	r24, 0x69	; 105
 5aa:	41 f5       	brne	.+80     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5ac:	f8 01       	movw	r30, r16
 5ae:	37 fe       	sbrs	r3, 7
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5b2:	60 81       	ld	r22, Z
 5b4:	71 81       	ldd	r23, Z+1	; 0x01
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	93 81       	ldd	r25, Z+3	; 0x03
 5ba:	0c 5f       	subi	r16, 0xFC	; 252
 5bc:	1f 4f       	sbci	r17, 0xFF	; 255
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5c0:	60 81       	ld	r22, Z
 5c2:	71 81       	ldd	r23, Z+1	; 0x01
 5c4:	07 2e       	mov	r0, r23
 5c6:	00 0c       	add	r0, r0
 5c8:	88 0b       	sbc	r24, r24
 5ca:	99 0b       	sbc	r25, r25
 5cc:	0e 5f       	subi	r16, 0xFE	; 254
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	f3 2d       	mov	r31, r3
 5d2:	ff 76       	andi	r31, 0x6F	; 111
 5d4:	3f 2e       	mov	r3, r31
 5d6:	97 ff       	sbrs	r25, 7
 5d8:	09 c0       	rjmp	.+18     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5da:	90 95       	com	r25
 5dc:	80 95       	com	r24
 5de:	70 95       	com	r23
 5e0:	61 95       	neg	r22
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	f0 68       	ori	r31, 0x80	; 128
 5ea:	3f 2e       	mov	r3, r31
 5ec:	2a e0       	ldi	r18, 0x0A	; 10
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	a3 01       	movw	r20, r6
 5f2:	0e 94 20 04 	call	0x840	; 0x840 <__ultoa_invert>
 5f6:	88 2e       	mov	r8, r24
 5f8:	86 18       	sub	r8, r6
 5fa:	45 c0       	rjmp	.+138    	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 5fc:	85 37       	cpi	r24, 0x75	; 117
 5fe:	31 f4       	brne	.+12     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 600:	23 2d       	mov	r18, r3
 602:	2f 7e       	andi	r18, 0xEF	; 239
 604:	b2 2e       	mov	r11, r18
 606:	2a e0       	ldi	r18, 0x0A	; 10
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	25 c0       	rjmp	.+74     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 60c:	93 2d       	mov	r25, r3
 60e:	99 7f       	andi	r25, 0xF9	; 249
 610:	b9 2e       	mov	r11, r25
 612:	8f 36       	cpi	r24, 0x6F	; 111
 614:	c1 f0       	breq	.+48     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 616:	18 f4       	brcc	.+6      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 618:	88 35       	cpi	r24, 0x58	; 88
 61a:	79 f0       	breq	.+30     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 61c:	b5 c0       	rjmp	.+362    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 61e:	80 37       	cpi	r24, 0x70	; 112
 620:	19 f0       	breq	.+6      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 622:	88 37       	cpi	r24, 0x78	; 120
 624:	21 f0       	breq	.+8      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 626:	b0 c0       	rjmp	.+352    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 628:	e9 2f       	mov	r30, r25
 62a:	e0 61       	ori	r30, 0x10	; 16
 62c:	be 2e       	mov	r11, r30
 62e:	b4 fe       	sbrs	r11, 4
 630:	0d c0       	rjmp	.+26     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 632:	fb 2d       	mov	r31, r11
 634:	f4 60       	ori	r31, 0x04	; 4
 636:	bf 2e       	mov	r11, r31
 638:	09 c0       	rjmp	.+18     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 63a:	34 fe       	sbrs	r3, 4
 63c:	0a c0       	rjmp	.+20     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 63e:	29 2f       	mov	r18, r25
 640:	26 60       	ori	r18, 0x06	; 6
 642:	b2 2e       	mov	r11, r18
 644:	06 c0       	rjmp	.+12     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 646:	28 e0       	ldi	r18, 0x08	; 8
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	05 c0       	rjmp	.+10     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 64c:	20 e1       	ldi	r18, 0x10	; 16
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 652:	20 e1       	ldi	r18, 0x10	; 16
 654:	32 e0       	ldi	r19, 0x02	; 2
 656:	f8 01       	movw	r30, r16
 658:	b7 fe       	sbrs	r11, 7
 65a:	07 c0       	rjmp	.+14     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 65c:	60 81       	ld	r22, Z
 65e:	71 81       	ldd	r23, Z+1	; 0x01
 660:	82 81       	ldd	r24, Z+2	; 0x02
 662:	93 81       	ldd	r25, Z+3	; 0x03
 664:	0c 5f       	subi	r16, 0xFC	; 252
 666:	1f 4f       	sbci	r17, 0xFF	; 255
 668:	06 c0       	rjmp	.+12     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 66a:	60 81       	ld	r22, Z
 66c:	71 81       	ldd	r23, Z+1	; 0x01
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 5f       	subi	r16, 0xFE	; 254
 674:	1f 4f       	sbci	r17, 0xFF	; 255
 676:	a3 01       	movw	r20, r6
 678:	0e 94 20 04 	call	0x840	; 0x840 <__ultoa_invert>
 67c:	88 2e       	mov	r8, r24
 67e:	86 18       	sub	r8, r6
 680:	fb 2d       	mov	r31, r11
 682:	ff 77       	andi	r31, 0x7F	; 127
 684:	3f 2e       	mov	r3, r31
 686:	36 fe       	sbrs	r3, 6
 688:	0d c0       	rjmp	.+26     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 68a:	23 2d       	mov	r18, r3
 68c:	2e 7f       	andi	r18, 0xFE	; 254
 68e:	a2 2e       	mov	r10, r18
 690:	89 14       	cp	r8, r9
 692:	58 f4       	brcc	.+22     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 694:	34 fe       	sbrs	r3, 4
 696:	0b c0       	rjmp	.+22     	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 698:	32 fc       	sbrc	r3, 2
 69a:	09 c0       	rjmp	.+18     	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 69c:	83 2d       	mov	r24, r3
 69e:	8e 7e       	andi	r24, 0xEE	; 238
 6a0:	a8 2e       	mov	r10, r24
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6a4:	b8 2c       	mov	r11, r8
 6a6:	a3 2c       	mov	r10, r3
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 6aa:	b8 2c       	mov	r11, r8
 6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 6ae:	b9 2c       	mov	r11, r9
 6b0:	a4 fe       	sbrs	r10, 4
 6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6b4:	fe 01       	movw	r30, r28
 6b6:	e8 0d       	add	r30, r8
 6b8:	f1 1d       	adc	r31, r1
 6ba:	80 81       	ld	r24, Z
 6bc:	80 33       	cpi	r24, 0x30	; 48
 6be:	21 f4       	brne	.+8      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6c0:	9a 2d       	mov	r25, r10
 6c2:	99 7e       	andi	r25, 0xE9	; 233
 6c4:	a9 2e       	mov	r10, r25
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6c8:	a2 fe       	sbrs	r10, 2
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
 6cc:	b3 94       	inc	r11
 6ce:	b3 94       	inc	r11
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6d2:	8a 2d       	mov	r24, r10
 6d4:	86 78       	andi	r24, 0x86	; 134
 6d6:	09 f0       	breq	.+2      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6d8:	b3 94       	inc	r11
 6da:	a3 fc       	sbrc	r10, 3
 6dc:	11 c0       	rjmp	.+34     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6de:	a0 fe       	sbrs	r10, 0
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6e2:	b2 14       	cp	r11, r2
 6e4:	88 f4       	brcc	.+34     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 6e6:	28 0c       	add	r2, r8
 6e8:	92 2c       	mov	r9, r2
 6ea:	9b 18       	sub	r9, r11
 6ec:	0e c0       	rjmp	.+28     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 6ee:	b2 14       	cp	r11, r2
 6f0:	60 f4       	brcc	.+24     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 6f2:	b6 01       	movw	r22, r12
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 6fc:	b3 94       	inc	r11
 6fe:	f7 cf       	rjmp	.-18     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 700:	b2 14       	cp	r11, r2
 702:	18 f4       	brcc	.+6      	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 704:	2b 18       	sub	r2, r11
 706:	02 c0       	rjmp	.+4      	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
 708:	98 2c       	mov	r9, r8
 70a:	21 2c       	mov	r2, r1
 70c:	a4 fe       	sbrs	r10, 4
 70e:	10 c0       	rjmp	.+32     	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 710:	b6 01       	movw	r22, r12
 712:	80 e3       	ldi	r24, 0x30	; 48
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 71a:	a2 fe       	sbrs	r10, 2
 71c:	17 c0       	rjmp	.+46     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 71e:	a1 fc       	sbrc	r10, 1
 720:	03 c0       	rjmp	.+6      	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 722:	88 e7       	ldi	r24, 0x78	; 120
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 728:	88 e5       	ldi	r24, 0x58	; 88
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	b6 01       	movw	r22, r12
 72e:	0c c0       	rjmp	.+24     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 730:	8a 2d       	mov	r24, r10
 732:	86 78       	andi	r24, 0x86	; 134
 734:	59 f0       	breq	.+22     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 736:	a1 fe       	sbrs	r10, 1
 738:	02 c0       	rjmp	.+4      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 73a:	8b e2       	ldi	r24, 0x2B	; 43
 73c:	01 c0       	rjmp	.+2      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 73e:	80 e2       	ldi	r24, 0x20	; 32
 740:	a7 fc       	sbrc	r10, 7
 742:	8d e2       	ldi	r24, 0x2D	; 45
 744:	b6 01       	movw	r22, r12
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 74c:	89 14       	cp	r8, r9
 74e:	38 f4       	brcc	.+14     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 750:	b6 01       	movw	r22, r12
 752:	80 e3       	ldi	r24, 0x30	; 48
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 75a:	9a 94       	dec	r9
 75c:	f7 cf       	rjmp	.-18     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 75e:	8a 94       	dec	r8
 760:	f3 01       	movw	r30, r6
 762:	e8 0d       	add	r30, r8
 764:	f1 1d       	adc	r31, r1
 766:	80 81       	ld	r24, Z
 768:	b6 01       	movw	r22, r12
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 770:	81 10       	cpse	r8, r1
 772:	f5 cf       	rjmp	.-22     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 774:	22 20       	and	r2, r2
 776:	09 f4       	brne	.+2      	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 778:	42 ce       	rjmp	.-892    	; 0x3fe <vfprintf+0x24>
 77a:	b6 01       	movw	r22, r12
 77c:	80 e2       	ldi	r24, 0x20	; 32
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fputc>
 784:	2a 94       	dec	r2
 786:	f6 cf       	rjmp	.-20     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
 788:	f6 01       	movw	r30, r12
 78a:	86 81       	ldd	r24, Z+6	; 0x06
 78c:	97 81       	ldd	r25, Z+7	; 0x07
 78e:	02 c0       	rjmp	.+4      	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	9f ef       	ldi	r25, 0xFF	; 255
 794:	2b 96       	adiw	r28, 0x0b	; 11
 796:	e2 e1       	ldi	r30, 0x12	; 18
 798:	0c 94 9a 04 	jmp	0x934	; 0x934 <__epilogue_restores__>

0000079c <strnlen_P>:
 79c:	fc 01       	movw	r30, r24
 79e:	05 90       	lpm	r0, Z+
 7a0:	61 50       	subi	r22, 0x01	; 1
 7a2:	70 40       	sbci	r23, 0x00	; 0
 7a4:	01 10       	cpse	r0, r1
 7a6:	d8 f7       	brcc	.-10     	; 0x79e <strnlen_P+0x2>
 7a8:	80 95       	com	r24
 7aa:	90 95       	com	r25
 7ac:	8e 0f       	add	r24, r30
 7ae:	9f 1f       	adc	r25, r31
 7b0:	08 95       	ret

000007b2 <strnlen>:
 7b2:	fc 01       	movw	r30, r24
 7b4:	61 50       	subi	r22, 0x01	; 1
 7b6:	70 40       	sbci	r23, 0x00	; 0
 7b8:	01 90       	ld	r0, Z+
 7ba:	01 10       	cpse	r0, r1
 7bc:	d8 f7       	brcc	.-10     	; 0x7b4 <strnlen+0x2>
 7be:	80 95       	com	r24
 7c0:	90 95       	com	r25
 7c2:	8e 0f       	add	r24, r30
 7c4:	9f 1f       	adc	r25, r31
 7c6:	08 95       	ret

000007c8 <fputc>:
 7c8:	0f 93       	push	r16
 7ca:	1f 93       	push	r17
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	fb 01       	movw	r30, r22
 7d2:	23 81       	ldd	r18, Z+3	; 0x03
 7d4:	21 fd       	sbrc	r18, 1
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <fputc+0x16>
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	9f ef       	ldi	r25, 0xFF	; 255
 7dc:	2c c0       	rjmp	.+88     	; 0x836 <fputc+0x6e>
 7de:	22 ff       	sbrs	r18, 2
 7e0:	16 c0       	rjmp	.+44     	; 0x80e <fputc+0x46>
 7e2:	46 81       	ldd	r20, Z+6	; 0x06
 7e4:	57 81       	ldd	r21, Z+7	; 0x07
 7e6:	24 81       	ldd	r18, Z+4	; 0x04
 7e8:	35 81       	ldd	r19, Z+5	; 0x05
 7ea:	42 17       	cp	r20, r18
 7ec:	53 07       	cpc	r21, r19
 7ee:	44 f4       	brge	.+16     	; 0x800 <fputc+0x38>
 7f0:	a0 81       	ld	r26, Z
 7f2:	b1 81       	ldd	r27, Z+1	; 0x01
 7f4:	9d 01       	movw	r18, r26
 7f6:	2f 5f       	subi	r18, 0xFF	; 255
 7f8:	3f 4f       	sbci	r19, 0xFF	; 255
 7fa:	31 83       	std	Z+1, r19	; 0x01
 7fc:	20 83       	st	Z, r18
 7fe:	8c 93       	st	X, r24
 800:	26 81       	ldd	r18, Z+6	; 0x06
 802:	37 81       	ldd	r19, Z+7	; 0x07
 804:	2f 5f       	subi	r18, 0xFF	; 255
 806:	3f 4f       	sbci	r19, 0xFF	; 255
 808:	37 83       	std	Z+7, r19	; 0x07
 80a:	26 83       	std	Z+6, r18	; 0x06
 80c:	14 c0       	rjmp	.+40     	; 0x836 <fputc+0x6e>
 80e:	8b 01       	movw	r16, r22
 810:	ec 01       	movw	r28, r24
 812:	fb 01       	movw	r30, r22
 814:	00 84       	ldd	r0, Z+8	; 0x08
 816:	f1 85       	ldd	r31, Z+9	; 0x09
 818:	e0 2d       	mov	r30, r0
 81a:	09 95       	icall
 81c:	89 2b       	or	r24, r25
 81e:	e1 f6       	brne	.-72     	; 0x7d8 <fputc+0x10>
 820:	d8 01       	movw	r26, r16
 822:	16 96       	adiw	r26, 0x06	; 6
 824:	8d 91       	ld	r24, X+
 826:	9c 91       	ld	r25, X
 828:	17 97       	sbiw	r26, 0x07	; 7
 82a:	01 96       	adiw	r24, 0x01	; 1
 82c:	17 96       	adiw	r26, 0x07	; 7
 82e:	9c 93       	st	X, r25
 830:	8e 93       	st	-X, r24
 832:	16 97       	sbiw	r26, 0x06	; 6
 834:	ce 01       	movw	r24, r28
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	08 95       	ret

00000840 <__ultoa_invert>:
 840:	fa 01       	movw	r30, r20
 842:	aa 27       	eor	r26, r26
 844:	28 30       	cpi	r18, 0x08	; 8
 846:	51 f1       	breq	.+84     	; 0x89c <__ultoa_invert+0x5c>
 848:	20 31       	cpi	r18, 0x10	; 16
 84a:	81 f1       	breq	.+96     	; 0x8ac <__ultoa_invert+0x6c>
 84c:	e8 94       	clt
 84e:	6f 93       	push	r22
 850:	6e 7f       	andi	r22, 0xFE	; 254
 852:	6e 5f       	subi	r22, 0xFE	; 254
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	af 4f       	sbci	r26, 0xFF	; 255
 85c:	b1 e0       	ldi	r27, 0x01	; 1
 85e:	3e d0       	rcall	.+124    	; 0x8dc <__ultoa_invert+0x9c>
 860:	b4 e0       	ldi	r27, 0x04	; 4
 862:	3c d0       	rcall	.+120    	; 0x8dc <__ultoa_invert+0x9c>
 864:	67 0f       	add	r22, r23
 866:	78 1f       	adc	r23, r24
 868:	89 1f       	adc	r24, r25
 86a:	9a 1f       	adc	r25, r26
 86c:	a1 1d       	adc	r26, r1
 86e:	68 0f       	add	r22, r24
 870:	79 1f       	adc	r23, r25
 872:	8a 1f       	adc	r24, r26
 874:	91 1d       	adc	r25, r1
 876:	a1 1d       	adc	r26, r1
 878:	6a 0f       	add	r22, r26
 87a:	71 1d       	adc	r23, r1
 87c:	81 1d       	adc	r24, r1
 87e:	91 1d       	adc	r25, r1
 880:	a1 1d       	adc	r26, r1
 882:	20 d0       	rcall	.+64     	; 0x8c4 <__ultoa_invert+0x84>
 884:	09 f4       	brne	.+2      	; 0x888 <__ultoa_invert+0x48>
 886:	68 94       	set
 888:	3f 91       	pop	r19
 88a:	2a e0       	ldi	r18, 0x0A	; 10
 88c:	26 9f       	mul	r18, r22
 88e:	11 24       	eor	r1, r1
 890:	30 19       	sub	r19, r0
 892:	30 5d       	subi	r19, 0xD0	; 208
 894:	31 93       	st	Z+, r19
 896:	de f6       	brtc	.-74     	; 0x84e <__ultoa_invert+0xe>
 898:	cf 01       	movw	r24, r30
 89a:	08 95       	ret
 89c:	46 2f       	mov	r20, r22
 89e:	47 70       	andi	r20, 0x07	; 7
 8a0:	40 5d       	subi	r20, 0xD0	; 208
 8a2:	41 93       	st	Z+, r20
 8a4:	b3 e0       	ldi	r27, 0x03	; 3
 8a6:	0f d0       	rcall	.+30     	; 0x8c6 <__ultoa_invert+0x86>
 8a8:	c9 f7       	brne	.-14     	; 0x89c <__ultoa_invert+0x5c>
 8aa:	f6 cf       	rjmp	.-20     	; 0x898 <__ultoa_invert+0x58>
 8ac:	46 2f       	mov	r20, r22
 8ae:	4f 70       	andi	r20, 0x0F	; 15
 8b0:	40 5d       	subi	r20, 0xD0	; 208
 8b2:	4a 33       	cpi	r20, 0x3A	; 58
 8b4:	18 f0       	brcs	.+6      	; 0x8bc <__ultoa_invert+0x7c>
 8b6:	49 5d       	subi	r20, 0xD9	; 217
 8b8:	31 fd       	sbrc	r19, 1
 8ba:	40 52       	subi	r20, 0x20	; 32
 8bc:	41 93       	st	Z+, r20
 8be:	02 d0       	rcall	.+4      	; 0x8c4 <__ultoa_invert+0x84>
 8c0:	a9 f7       	brne	.-22     	; 0x8ac <__ultoa_invert+0x6c>
 8c2:	ea cf       	rjmp	.-44     	; 0x898 <__ultoa_invert+0x58>
 8c4:	b4 e0       	ldi	r27, 0x04	; 4
 8c6:	a6 95       	lsr	r26
 8c8:	97 95       	ror	r25
 8ca:	87 95       	ror	r24
 8cc:	77 95       	ror	r23
 8ce:	67 95       	ror	r22
 8d0:	ba 95       	dec	r27
 8d2:	c9 f7       	brne	.-14     	; 0x8c6 <__ultoa_invert+0x86>
 8d4:	00 97       	sbiw	r24, 0x00	; 0
 8d6:	61 05       	cpc	r22, r1
 8d8:	71 05       	cpc	r23, r1
 8da:	08 95       	ret
 8dc:	9b 01       	movw	r18, r22
 8de:	ac 01       	movw	r20, r24
 8e0:	0a 2e       	mov	r0, r26
 8e2:	06 94       	lsr	r0
 8e4:	57 95       	ror	r21
 8e6:	47 95       	ror	r20
 8e8:	37 95       	ror	r19
 8ea:	27 95       	ror	r18
 8ec:	ba 95       	dec	r27
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__ultoa_invert+0xa2>
 8f0:	62 0f       	add	r22, r18
 8f2:	73 1f       	adc	r23, r19
 8f4:	84 1f       	adc	r24, r20
 8f6:	95 1f       	adc	r25, r21
 8f8:	a0 1d       	adc	r26, r0
 8fa:	08 95       	ret

000008fc <__prologue_saves__>:
 8fc:	2f 92       	push	r2
 8fe:	3f 92       	push	r3
 900:	4f 92       	push	r4
 902:	5f 92       	push	r5
 904:	6f 92       	push	r6
 906:	7f 92       	push	r7
 908:	8f 92       	push	r8
 90a:	9f 92       	push	r9
 90c:	af 92       	push	r10
 90e:	bf 92       	push	r11
 910:	cf 92       	push	r12
 912:	df 92       	push	r13
 914:	ef 92       	push	r14
 916:	ff 92       	push	r15
 918:	0f 93       	push	r16
 91a:	1f 93       	push	r17
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
 920:	cd b7       	in	r28, 0x3d	; 61
 922:	de b7       	in	r29, 0x3e	; 62
 924:	ca 1b       	sub	r28, r26
 926:	db 0b       	sbc	r29, r27
 928:	0f b6       	in	r0, 0x3f	; 63
 92a:	f8 94       	cli
 92c:	de bf       	out	0x3e, r29	; 62
 92e:	0f be       	out	0x3f, r0	; 63
 930:	cd bf       	out	0x3d, r28	; 61
 932:	09 94       	ijmp

00000934 <__epilogue_restores__>:
 934:	2a 88       	ldd	r2, Y+18	; 0x12
 936:	39 88       	ldd	r3, Y+17	; 0x11
 938:	48 88       	ldd	r4, Y+16	; 0x10
 93a:	5f 84       	ldd	r5, Y+15	; 0x0f
 93c:	6e 84       	ldd	r6, Y+14	; 0x0e
 93e:	7d 84       	ldd	r7, Y+13	; 0x0d
 940:	8c 84       	ldd	r8, Y+12	; 0x0c
 942:	9b 84       	ldd	r9, Y+11	; 0x0b
 944:	aa 84       	ldd	r10, Y+10	; 0x0a
 946:	b9 84       	ldd	r11, Y+9	; 0x09
 948:	c8 84       	ldd	r12, Y+8	; 0x08
 94a:	df 80       	ldd	r13, Y+7	; 0x07
 94c:	ee 80       	ldd	r14, Y+6	; 0x06
 94e:	fd 80       	ldd	r15, Y+5	; 0x05
 950:	0c 81       	ldd	r16, Y+4	; 0x04
 952:	1b 81       	ldd	r17, Y+3	; 0x03
 954:	aa 81       	ldd	r26, Y+2	; 0x02
 956:	b9 81       	ldd	r27, Y+1	; 0x01
 958:	ce 0f       	add	r28, r30
 95a:	d1 1d       	adc	r29, r1
 95c:	0f b6       	in	r0, 0x3f	; 63
 95e:	f8 94       	cli
 960:	de bf       	out	0x3e, r29	; 62
 962:	0f be       	out	0x3f, r0	; 63
 964:	cd bf       	out	0x3d, r28	; 61
 966:	ed 01       	movw	r28, r26
 968:	08 95       	ret

0000096a <_exit>:
 96a:	f8 94       	cli

0000096c <__stop_program>:
 96c:	ff cf       	rjmp	.-2      	; 0x96c <__stop_program>
